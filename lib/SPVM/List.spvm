# Copyright (c) 2023 Yuki Kimoto
# MIT License

class List {
  use Fn;
  use Array;
  
  # Enumerations
  private enum {
    DEFAULT_CAPACITY = 4,
  }
  
  # Fields
  has capacity : ro int;
  has length : ro int;
  has array : object[];
  
  # Class methods
  static method new : List ($array : object[] = undef, $capacity : int = -1) {
    my $self = new List;
    
    $self->init($array, $capacity);
    
    return $self;
  }
  
  protected method init : void ($array : object[] = undef, $capacity : int = -1) {
    
    my $length : int;
    
    if ($array) {
      $length = @$array;
    }
    else {
      $length = 0;
    }
    
    $self->init_len($array, $length, $capacity);
    
    if ($array) {
      Array->memcpy_object_address($self->{array}, 0, $array, 0, $length);
    }
    
  }
  
  static method new_len : List ($proto_array : object[], $length : int, $capacity : int = -1) {
    my $self = new List;
    
    $self->init_len($proto_array, $length, $capacity);
    
    return $self;
  }
  
  protected method init_len : void ($proto_array : object[], $length : int, $capacity : int = -1) {
    
    unless ($proto_array) {
      $proto_array = new object[0];
    }
    
    unless ($length >= 0) {
      die "\$length must be greater than or equal to 0.";
    }
    
    if ($capacity < 0) {
      $capacity = &DEFAULT_CAPACITY;
    }
    
    if ($length > $capacity) {
      $capacity = $length;
    }
    
    $self->{capacity} = $capacity;
    $self->{length} = $length;
    $self->{array} = Array->new_proto($proto_array, $capacity);
  }
  
  # Instance methods
  method get : object ($index : int) {
    my $length = $self->length;
    
    unless ($index >= 0) {
      die "\$index must be greater than or equal to 0.";
    }
    
    unless ($index < $length) {
      die "\$index must be less than the length of \$list.";
    }
    
    my $element = $self->{array}[$index];
    
    return $element;
  }
  
  method insert : void ($index : int, $element : object) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    unless ($index >= 0) {
      die "\$index must be greater than or equal to 0.";
    }
    
    unless ($index <= $length) {
      die "\$index must be less than or equal to the length of \$list.";
    }
    
    my $new_length = $length + 1;
    $self->_extend($new_length);
    
    my $array = $self->{array};
    if ($index != $length) {
      Array->memmove_object_address($array, $index + 1, $array, $index, $length - $index);
    }
    $array->[$index] = $element;
    
    $self->{length}++;
  }
  
  method pop : object () {
    my $length = $self->length;
    
    unless ($length > 0) {
      die "The length of \$list must be greater than 0.";
    }
    
    my $index = $self->{length};
    
    my $ret = $self->{array}[$index - 1];
    
    $self->{array}[$index - 1] = undef;
    
    --$self->{length};
    
    return $ret;
  }
  
  method push : void ($element : object) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    my $new_length = $length + 1;
    $self->_extend($new_length);
    my $index = $self->{length};
    $self->{array}[$index] = $element;
    ++$self->{length};
  }
  
  method remove : object ($index : int) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    unless ($index >= 0) {
      die "\$index must be greater than or equal to 0.";
    }
    
    unless ($index < $length) {
      die "\$index must be less than the length of \$list.";
    }
    
    my $array = $self->{array};
    my $remove_value = $array->[$index];
    
    my $move_length = $length - $index - 1;
    Array->memmove_object_address($array, $index, $array, $index + 1, $move_length);
    $array->[$length - 1] = undef;
    
    $self->{length}--;
    
    return $remove_value;
  }
  
  method replace : void ($offset : int, $remove_length : int, $replace : object[]) {
    unless ($offset >= 0) {
      die "\$offset must be greater than or equal to 0.";
    }
    
    unless ($remove_length >= 0) {
      die "\$remove_length must be greater than or equal to 0.";
    }
    unless ($offset + $remove_length <= $self->{length}) {
      die "\$offset + \$removing lenght must be less than or equal to the length of \$list.";
    }
    
    my $replace_length = 0;
    if ($replace) {
      $replace_length = @$replace;
    }
    
    my $new_length = $self->{length} - $remove_length + $replace_length;
    $self->_extend($new_length);
    
    my $move_length = $self->{length} - $offset - $remove_length;
    Array->memmove_object_address($self->{array}, $offset + $replace_length, $self->{array}, $offset + $remove_length, $move_length);
    
    if ($replace) {
      Array->memcpy_object_address($self->{array}, $offset, $replace, 0, $replace_length);
    }
    
    $self->{length} = $new_length;
  }
  
  method reserve : void ($new_capacity : int) {
    unless ($new_capacity >= 0) {
      die "\$new_capacity must be greater than or equal to 0.";
    }
    
    my $capacity = $self->{capacity};
    
    if ($new_capacity > $capacity) {
      my $length = $self->{length};
      my $new_array = Array->new_proto($self->{array}, $new_capacity);
      Array->memcpy_object_address($new_array, 0, $self->{array}, 0, $length);
      $self->{array} = $new_array;
      $self->{capacity} = $new_capacity;
    }
  }
  
  method resize : void ($new_length : int) {
    unless ($new_length >= 0) {
      die "\$new_length must be greater than or equal to 0.";
    }
    
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    if ($new_length > $length) {
      $self->_extend($new_length);
    }
    elsif ($new_length < $length) {
      Array->memset_object($self->{array}, undef, $new_length, $length - $new_length);
    }
    $self->{length} = $new_length;
  }
  
  method set : void ($index : int, $element : object) {
    my $length = $self->length;
    
    unless ($index >= 0) {
      die "\$index must be greater than or equal to 0.";
    }
    
    unless ($index < $length) {
      die "\$index must be less than the length of \$list.";
    }
    
    $self->{array}[$index] = $element;
  }
  
  method shift : object () {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    unless ($length > 0) {
      die "The length of \$list must be greater than 0.";
    }
    
    my $array = $self->{array};
    
    my $element = $array->[0];
    
    Array->memmove_object_address($array, 0, $array, 1, $length - 1);
    $array->[$length - 1] = undef;
    
    $self->{length}--;
    
    return $element;
  }
  
  method to_array : object[] () {
    my $length = $self->{length};
    my $new_array = Array->new_proto($self->{array}, $length);
    Array->memcpy_object_address($new_array, 0, $self->{array}, 0, $length);
    return $new_array;
  }
  
  method unshift : void ($element : object) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    my $new_length = $length + 1;
    $self->_extend($new_length);
    
    my $array = $self->{array};
    
    Array->memmove_object_address($array, 1, $array, 0, $length);
    
    $array->[0] = $element;
    $self->{length}++;
  }
  
  protected method _extend : void ($min_capacity : int) {
    my $capacity = $self->{capacity};
    
    unless ($min_capacity > $capacity) {
      return;
    }
    
    my $base_capacity = 0;
    if ($capacity < $min_capacity) {
      $base_capacity = $min_capacity;
    }
    else {
      $base_capacity = $capacity;
    }
    
    my $new_capacity = $base_capacity * 2;
    my $new_array = Array->new_proto($self->{array}, $new_capacity);
    
    my $length = $self->{length};
    my $array = $self->{array};
    
    unless ($capacity == @$array) {
      die "[Unexpected Error]The capacity field must be equal to the length of the array field.";
    }
    
    Array->memcpy_object_address($new_array, 0, $array, 0, $length);
    
    $self->{array} = $new_array;
    $self->{capacity} = $new_capacity;
  }
}
