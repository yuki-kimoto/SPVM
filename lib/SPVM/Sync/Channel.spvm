# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Sync::Channel {
  
  use Hash;
  use Sync::Mutex;
  
  # Fields
  has capacity : int;
  
  has offset : int;
  
  has length : int;
  
  has objects : object[];
  
  has readable_object : object;
  
  has readable : int;
  
  has mutex : Sync::Mutex;
  
  has closed : int;
  
  # Class Methods
  static method new : Sync::Channel ($options : object[] = undef) {
    
    &check_option_names($options, ["capacity"]);
    
    my $options_h = Hash->new($options);
    
    my $self = new Sync::Channel;
    
    my $capacity = $options_h->delete_or_default_int("capacity", 0);
    $self->{capacity} = $capacity;
    
    unless ($capacity >= 0) {
      die "The \"capacity\" option must be greater than or equal to 0.";
    }
    
    my $objects = new object[$capacity];
    $self->{objects} = $objects;
    
    my $mutex = Sync::Mutex->new;
    $self->{mutex} = $mutex;
    
    if ($capacity == 0) {
      $mutex->lock;
    }
    
    return $self;
  }
  
  static method make : Sync::Channel ($capacity : int = 0) {
    my $self = &new({capacity => $capacity});
    
    return $self;
  }
  
  private static method check_option_names : void ($options : object[], $available_option_names : string[]) {
    
    unless ($options) {
      return;
    }
    
    my $available_option_names_h = Hash->new;
    for my $available_option_name (@$available_option_names) {
     $available_option_names_h->set_int($available_option_name, 1);
    }
    
    for (my $i = 0; $i < @$options; $i += 2) {
      my $option_name = (string)$options->[$i];
      
      unless ($available_option_names_h->get($option_name)) {
        die "The \"$option_name\" option is not available.";
      }
    }
  }
  
  # Instance Methods
  method read : object ($error_ref : int*) {
    
    $$error_ref = 0;
    
    my $closed = $self->{closed};
    
    if ($closed) {
      $$error_ref = 1;
      return undef;
    }
    
    while (1) {
      my $readable = $self->{readable};
      
      if ($readable) {
        my $object = $self->{readable_object};
        $self->{readable} = 0;
        
        return $object;
      }
      else {
        my $length = $self->{length};
        
        if ($length > 0) {
          my $offset = $self->{offset};
          my $objects = $self->{objects};
          
          my $object = $objects->[$offset];
          $self->{readable_object} = $object;
          $self->{readable} = 1;
          
          $objects->[$offset] = undef;
          
          $offset++;
          
          if ($offset >= $length) {
            $offset = 0;
          }
          
          $length -= 1;
          
          $self->{offset} = $offset;
          $self->{length} = $length;
        }
      }
    }
  }
  
  method write : void ($object : object) {
    my $closed = $self->{closed};
    
    if ($closed) {
      die "This channel is closed.";
    }
    
    my $capacity = $self->{capacity};
    
    if ($capacity == 0) {
      
    }
    else {
      
    }
    
  }
  
  method close : void () {
    my $closed = $self->{closed};
    
    if ($closed) {
      die "This channel is already closed.";
    }
    
    $self->{closed} = 1;
  }
  
  method cap : int () {
    return $self->{capacity};
  }
  
  method len : int () {
    return $self->{length};
  }
  
  method can_read : int () {
    return $self->{readable};
  }
}
