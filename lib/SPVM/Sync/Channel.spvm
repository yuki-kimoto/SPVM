# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Sync::Channel {
  
  use Hash;
  use Sync::Mutex;
  
  # Fields
  has capacity : int;
  
  has objects : object[];
  
  has offset : int;
  
  has length : int;
  
  has mutex : Sync::Mutex;
  
  has closed : int;
  
  # Class Methods
  static method new : Sync::Channel ($options : object[] = undef) {
    
    &check_option_names($options, ["capacity"]);
    
    my $options_h = Hash->new($options);
    
    my $self = new Sync::Channel;
    
    my $capacity = $options_h->delete_or_default_int("capacity", 0);
    $self->{capacity} = $capacity;
    
    my $objects = new object[$capacity];
    $self->{objects} = $objects;
    
    $self->{mutex} = Sync::Mutex->new;
    
    return $self;
  }
  
  static method make : Sync::Channel ($capacity : int = 0) {
    my $self = &new({capacity => $capacity});
    
    return $self;
  }
  
  private static method check_option_names : void ($options : object[], $available_option_names : string[]) {
    
    unless ($options) {
      return;
    }
    
    my $available_option_names_h = Hash->new;
    for my $available_option_name (@$available_option_names) {
     $available_option_names_h->set_int($available_option_name, 1);
    }
    
    for (my $i = 0; $i < @$options; $i += 2) {
      my $option_name = (string)$options->[$i];
      
      unless ($available_option_names_h->get($option_name)) {
        die "The \"$option_name\" option is not available.";
      }
    }
  }
  
  # Instance Methods
  method read : object ($error_ref : int*) {
    
    $$error_ref = 0;
    
    my $closed = $self->{closed};
    
    if ($closed) {
      return undef;
    }
    
    
  }
  
  method write : void ($object : object) {
    my $closed = $self->{closed};
    
    if ($closed) {
      die "This channel is closed.";
    }
    
    
  }
  
  method close : void () {
    my $closed = $self->{closed};
    
    if ($closed) {
      die "This channel is already closed.";
    }
    
    $self->{closed} = 1;
  }
  
  method cap : int () {
    return $self->{capacity};
  }
  
  method len : int () {
    return $self->{length};
  }
}
