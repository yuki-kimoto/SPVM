# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Native::MethodCall {
  use Native::Method;
  use Callback;
  
  has method : Native::Method;
  
  # Class Methods
  native static method new_class_method : Native::MethodCall ($basic_type_name : string, $method_name : string);
  
  native static method new_instance_method_static : Native::MethodCall ($basic_type_name : string, $method_name : string);
  
  native static method new_instance_method : Native::MethodCall ($instance : object, $method_name : string);
  
  native static method call_callback : void ($callback : Callback, $error_id : int*, $stack : Native::Stack = undef);
  
  native static method call_class_method_for_env : void ($basic_type_name : string, $method_name : string, $error_id : int*, $stack : Native::Stack = undef, $env : Native::Env = undef);
  
  native static method get_exception : string ($stack : Native::Stack = undef, $env : Native::Env = undef);
  
  native static method set_exception : void ($exception : string, $stack : Native::Stack = undef, $env : Native::Env = undef);
  
  # Instance Methods
  native method call : object ($args : object[] = undef);
  
  static method call_class_method : object ($basic_type_name : string, $method_name : string, $args : object[] = undef) {
    
    my $class_method = &new_class_method($basic_type_name, $method_name);
    
    my $return_value = $class_method->call($args);
    
    return $return_value;
  }
  
  static method call_instance_method_static : object ($basic_type_name : string, $method_name : string, $args : object[] = undef) {
    
    my $instance_method = &new_instance_method_static($basic_type_name, $method_name);
    
    my $return_value = $instance_method->call($args);
    
    return $return_value;
  }
  
  static method call_instance_method : object ($method_name : string, $args : object[] = undef) {
    
    my $instance_method = &new_instance_method($args->[0], $method_name);
    
    my $return_value = $instance_method->call($args);
    
    return $return_value;
  }
}
