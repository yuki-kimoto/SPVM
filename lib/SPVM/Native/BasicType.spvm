# Copyright (c) 2023 [--user-name]
# MIT License

class Native::BasicType {
  use Native::Runtime;
  use Native::ClassVar;
  use Native::Field;
  use Native::Method;
  
  has runtime : Native::Runtime;
  
  native method get_id : int ();
  
  native method get_name : string ();
  
  native method get_module_dir : string ();
  
  native method get_module_rel_file : string ();
  
  native method get_parent : Native::BasicType ();

=pod

  int32_t (*get_category)(void* runtime, void* basic_type);
  
  const void* (*get_version_string)(void* runtime, void* basic_type);
  
  int32_t (*is_pointer)(void* runtime, void* basic_type);
  
  int32_t (*is_anon)(void* runtime, void* basic_type);
  
  void* (*get_class_var_by_index)(void* runtime, void* basic_type, int32_t class_var_index);
  
  void* (*get_class_var_by_name)(void* runtime, void* basic_type, const void* class_var_name);
  
  int32_t (*get_class_vars_length)(void* runtime, void* basic_type);
  
  void* (*get_field_by_index)(void* runtime, void* basic_type, int32_t field_index);
  
  void* (*get_field_by_name)(void* runtime, void* basic_type, const void* field_name);
  
  int32_t (*get_fields_length)(void* runtime, void* basic_type);
  
  void* (*get_method_by_index)(void* runtime, void* basic_type, int32_t method_index);
  
  void* (*get_method_by_name)(void* runtime, void* basic_type, const void* method_name);
  
  int32_t (*get_methods_length)(void* runtime, void* basic_type);

=cut

}
