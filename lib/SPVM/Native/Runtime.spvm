# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Native::Runtime : pointer {
  use Native::Compiler;
  use Native::Env;
  use Native::Stack;
  use Native::BasicType;
  use Native::Method;
  use Native::Arg;
  use Native::ClassVar;
  use Native::Field;
  
  use Fn;
  
  # Fields
  has compiler : Native::Compiler;
  
  # Instance Methods
  native method get_basic_types_length : int ();
  
  native method get_basic_type_by_id : Native::BasicType ($id : int);
  
  native method get_basic_type_by_name : Native::BasicType ($name : string);
  
  native method build_precompile_class_source : string ($basic_type : Native::BasicType);
  
  native method build_precompile_method_source : string ($method : Native::Method);
  
  # Private Instance Methods - Only used in core.
  
  method _get_class_names : string[] () {
    
    my $basic_types_length = $self->get_basic_types_length;
    
    my $user_defined_basic_type_names_tmp = new string [$basic_types_length];
    
    my $user_defined_basic_type_names_length = 0;
    
    for (my $basic_type_id = 0; $basic_type_id < $basic_types_length; $basic_type_id++) {
      my $basic_type = $self->get_basic_type_by_id($basic_type_id);
      my $basic_type_name = $basic_type->get_name;
      if (($basic_type_name->[0] >= 'A' && $basic_type_name->[0] <= 'Z') && !Fn->contains($basic_type_name, "::anon::")) {
        $user_defined_basic_type_names_tmp->[$user_defined_basic_type_names_length] = $basic_type_name;
        $user_defined_basic_type_names_length++;
      }
    }
    
    my $user_defined_basic_type_names = new string [$user_defined_basic_type_names_length];
    
    for (my $i = 0; $i < $user_defined_basic_type_names_length; $i++) {
      $user_defined_basic_type_names->[$i] = $user_defined_basic_type_names_tmp->[$i];
    }
    
    return $user_defined_basic_type_names;
  }
  
  native method get_compiler : Native::Compiler ();
  
  native method new_env : Native::Env ();
  
  method get_basic_type_names : string[] () {
    
    my $basic_types_length = $self->get_basic_types_length;
    
    my $basic_type_names = new string [$basic_types_length];
    
    for (my $basic_type_id = 0; $basic_type_id < $basic_types_length; $basic_type_id++) {
      my $basic_type = $self->get_basic_type_by_id($basic_type_id);
      my $basic_type_name = $basic_type->get_name;
      $basic_type_names->[$basic_type_id] = $basic_type_name;
    }
    
    return $basic_type_names;
  }
  
  method get_method_names : string[] ($class_name : string) {
    
    my $basic_type = $self->get_basic_type_by_name($class_name);
    
    my $methods_length = $basic_type->get_methods_length;
    
    my $method_names = new string[$methods_length];
    
    for (my $index = 0; $index < $methods_length; $index++) {
      my $method = $basic_type->get_method_by_index($index);
      my $method_name = $method->get_name;
      $method_names->[$index] = $method_name;
    }
    
    return $method_names;
  }
  
  method get_field_names : string[] ($class_name : string) {
    
    my $basic_type = $self->get_basic_type_by_name($class_name);
    
    my $fields_length = $basic_type->get_fields_length;
    
    my $field_names = new string[$fields_length];
    
    for (my $index = 0; $index < $fields_length; $index++) {
      my $field = $basic_type->get_field_by_index($index);
      my $field_name = $field->get_name;
      $field_names->[$index] = $field_name;
    }
    
    return $field_names;
  }
  
  method get_class_var_names : string[] ($class_name : string) {
    
    my $basic_type = $self->get_basic_type_by_name($class_name);
    
    my $class_vars_length = $basic_type->get_class_vars_length;
    
    my $class_var_names = new string[$class_vars_length];
    
    for (my $index = 0; $index < $class_vars_length; $index++) {
      my $class_var = $basic_type->get_class_var_by_index($index);
      my $class_var_name = $class_var->get_name;
      $class_var_names->[$index] = $class_var_name;
    }
    
    return $class_var_names;
  }
  
  method get_method_by_name : Native::Method ($class_name : string, $method_name : string) {
    
    my $basic_type = $self->get_basic_type_by_name($class_name);
    
    my $method = $basic_type->get_method_by_name($method_name);
    
    return $method;
  }
  
  method get_field_by_name : Native::Field ($class_name : string, $field_name : string) {
    
    my $basic_type = $self->get_basic_type_by_name($class_name);
    
    my $field = $basic_type->get_field_by_name($field_name);
    
    return $field;
  }
  
  method get_class_var_by_name : Native::ClassVar ($class_name : string, $class_var_name : string) {
    
    my $basic_type = $self->get_basic_type_by_name($class_name);
    
    my $class_var = $basic_type->get_class_var_by_name($class_var_name);
    
    return $class_var;
  }
  
  method get_class_names : string[] () {
    
    my $class_names_list = StringList->new;
    
    my $basic_type_names = $self->get_basic_type_names;
    
    for my $basic_type_name (@$basic_type_names) {
      if (($basic_type_name->[0] >= 'A' && $basic_type_name->[0] <= 'Z') && !Fn->contains($basic_type_name, "::anon::")) {
        $class_names_list->push($basic_type_name);
      }
    }
    
    my $class_names = $class_names_list->to_array;
    
    return $class_names;
  }
  
  method get_basic_types : Native::BasicType[] ($options : object[] = undef) {
    
    my $basic_types_length = $self->get_basic_types_length;
    
    my $basic_types_list = List->new(new Native::BasicType[0]);
    
    for (my $id = 0; $id < $basic_types_length; $id++) {
      my $basic_type = $self->get_basic_type_by_id($id);
      $basic_types_list->push($basic_type);
    }
    
    my $basic_types = (Native::BasicType[])$basic_types_list->to_array;
    
    return $basic_types;
  }
  
}
