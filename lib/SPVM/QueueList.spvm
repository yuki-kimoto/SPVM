# Copyright (c) 2023 Yuki Kimoto
# MIT License

class QueueList extends List {
  version_from SPVM;
  
  use Fn;
  use Array;
  
  # Enumerations
  private enum {
    DEFAULT_CAPACITY = 4,
  }
  
  # Fields
  has offset : int;
  
  # Class methods
  static method new : QueueList ($array : object[] = undef, $capacity : int = -1) {
    my $self = new QueueList;
    
    $self->init($array, $capacity);
    
    return $self;
  }
  
  static method new_len : QueueList ($proto_array : object[], $length : int, $capacity : int = -1) {
    my $self = new QueueList;
    
    $self->init_len($proto_array, $length, $capacity);
    
    return $self;
  }
  
  # Instance methods
  method get : element ($index : int) {
    my $length = $self->length;
    
    unless ($index >= 0) {
      $index = $length + $index;
    }
    
    unless ($index >= 0) {
      die "The index \$index must be greater than or equal to 0.";
    }
    
    unless ($index < $length) {
      die "The index \$index must be less than the length of \$list.";
    }
    
    my $offset = $self->{offset};
    
    my $capacity = $self->{capacity};
    
    my $real_index = ($offset + $index) % $capacity;
    
    my $element = $self->{array}[$real_index];
    
    return $element;
  }
  
  method set : void ($index : int, $element : object) {
    my $length = $self->length;
    
    unless ($index >= 0) {
      $index = $length + $index;
    }
    
    unless ($index >= 0) {
      die "The index \$index must be greater than or equal to 0.";
    }
    
    unless ($index < $length) {
      die "The index \$index must be less than the length of \$list.";
    }
    
    my $offset = $self->{offset};
    
    my $capacity = $self->{capacity};
    
    my $real_index = ($offset + $index) % $capacity;
    
    $self->{array}[$real_index] = $element;
  }
  
  method shift : element () {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    unless ($length > 0) {
      die "The length of the list \$list must be greater than 0.";
    }
    
    my $array = $self->{array};
    
    my $element = $self->get(0);
    
    $self->set(0, undef);
    
    $self->{length}--;
    
    $self->{offset}++;
    
    if ($self->{offset} >= $self->{capacity}) {
      $self->{offset} -= $self->{capacity};
    }
    
    return $element;
  }
  
  method to_array : object[] () {
    my $length = $self->{length};
    
    my $new_array = Array->new_proto($self->{array}, $length);
    
    my $capacity = $self->{capacity};
    
    my $offset = $self->{offset};
    
    my $array = $self->{array};
    
    my $leftover = $length - ($capacity - $offset);
    
    if ($leftover > 0) {
      Array->memcpy_object_address($new_array, 0, $array, $offset, $length - $leftover);
      Array->memcpy_object_address($new_array, $length - $leftover, $array, 0, $leftover);
    }
    else {
      Array->memcpy_object_address($new_array, 0, $array, $offset, $length);
    }
    
    return $new_array;
  }
  
  method unshift : void ($element : object) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    my $new_length = $length + 1;
    $self->_maybe_extend($new_length);
    
    my $array = $self->{array};
    
    $self->{offset}--;
    
    if ($self->{offset} < 0) {
      $self->{offset} = $self->{capacity} - 1;
    }
    
    $self->{length}++;
    
    $self->set(0, $element);
    
  }
  
  protected method _maybe_extend : void ($new_capacity_at_least : int, $just : int = 0) {
    my $capacity = $self->{capacity};
    
    unless ($new_capacity_at_least > $capacity) {
      return;
    }
    
    my $new_capacity = 0;
    
    if ($just) {
      $new_capacity = $new_capacity_at_least;
    }
    else {
      my $base_capacity = 0;
      if ($capacity < $new_capacity_at_least) {
        $base_capacity = $new_capacity_at_least;
      }
      else {
        $base_capacity = $capacity;
      }
      
      $new_capacity = $base_capacity * 2;
    }
    
    my $new_array = Array->new_proto($self->{array}, $new_capacity);
    
    my $length = $self->{length};
    my $array = $self->{array};
    
    unless ($capacity == @$array) {
      die "[Unexpected Error]The capacity field must be equal to the length of the array field.";
    }
    
    my $offset = $self->{offset};
    
    Array->memcpy_object_address($new_array, $offset, $array, $offset, $capacity - $offset);
    
    Array->memcpy_object_address($new_array, $capacity, $array, 0, $offset);
    
    $self->{array} = $new_array;
    $self->{capacity} = $new_capacity;
  }
  
  method clone : QueueList () {
    
    my $clone = &new_len($self->{array}, $self->length, $self->capacity);
    
    my $capacity = $self->{capacity};
    
    my $offset = $self->{offset};
    
    for (my $index = 0; $index < $self->length; $index++) {
      my $real_index = ($offset + $index) % $capacity;
      
      if ($self->{array}->[$real_index]) {
        $clone->{array}->[$real_index] = $self->{array}->[$real_index]->(Cloneable)->clone;
      }
    }
    
    return $clone;
  }
  
}
