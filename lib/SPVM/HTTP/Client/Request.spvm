package SPVM::HTTP::Client::Request {
  use SPVM::HTTP::Client::Callback;
  use SPVM::HTTP::Client::TrailerCallback;
  use SPVM::HTTP::Headers;
  use SPVM::HTTP::URL::Parameters;

  has method : public string;
  has scheme : public string;
  has host : public string;
  has port : public int;
  has host_port : public string;
  has path : public string;
  has params : public SPVM::HTTP::URL::Parameters;
  has headers : public SPVM::HTTP::Headers;
  has cb : public SPVM::HTTP::Client::Callback;
  has trailer_cb : public SPVM::HTTP::Client::TrailerCallback;

  sub new_with : SPVM::HTTP::Client::Request ($args : SPVM::Hash) {
    my $self = new SPVM::HTTP::Client::Request;
    if (my $o = $args->get("method")) {
      $self->{method} = (string)$o;
    }
    if (my $o = $args->get("scheme")) {
      $self->{scheme} = (string)$o;
    }
    if (my $o = $args->get("port")) {
      $self->{port} = ((SPVM::Int)$o)->val;
    }
    if (my $o = $args->get("host_port")) {
      $self->{host_port} = (string)$o;
    }
    if (my $o = $args->get("path")) {
      $self->{path} = (string)$o;
    }
    if (my $o = $args->get("params")) {
      $self->{params} = (SPVM::HTTP::URL::Parameters)$o;
    }
    if (my $o = $args->get("headers")) {
      $self->{headers} = (SPVM::HTTP::Headers)$o;
    }
    if (my $o = $args->get("callback")) {
      $self->{cb} = (SPVM::HTTP::Client::Callback)$o;
    }
    if (my $o = $args->get("trailer_callback")) {
      $self->{trailer_cb} = (SPVM::HTTP::Client::TrailerCallback)$o;
    }
    return $self;
  }
}
