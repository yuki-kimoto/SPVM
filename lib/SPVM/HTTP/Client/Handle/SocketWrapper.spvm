package SPVM::HTTP::Client::Handle::SocketWrapper {
  use SPVM::IO::Socket;
  use SPVM::IO::File;

  has type : int;
  has sh : SPVM::IO::Socket;
  has fh : SPVM::IO::File;

  enum { _SOCKET, _FILE }

  sub new_io_socket : SPVM::HTTP::Client::Handle::SocketWrapper ($host : string, $port : int) {
    my $self = new SPVM::HTTP::Client::Handle::SocketWrapper;
    $self->{type} = _SOCKET();
    $self->{sh} = SPVM::IO::Socket->new($host, $port);
    return $self;
  }

  sub new_io_file : SPVM::HTTP::Client::Handle::SocketWrapper ($tmpfile : string) {
    my $self = new SPVM::HTTP::Client::Handle::SocketWrapper;
    $self->{type} = _FILE();
    $self->{fh} = SPVM::IO::File->open($tmpfile, "r+");
    return $self;
  }

  sub read : int ($self : self, $buffer : byte[]) {
    if ($self->{type} == _SOCKET()) {
      return $self->{sh}->read($buffer);
    } else {
      return $self->{fh}->read($buffer);
    }
  }

  sub write : int ($self : self, $buffer : string, $length : int) {
    if ($self->{type} == _SOCKET()) {
      return $self->{sh}->write($buffer, $length);
    } else {
      return $self->{fh}->write($buffer, $length);
    }
  }

  sub file_seek_begin : int ($self : self) {
    if ($self->{type} == _SOCKET()) {
      die "Can't use 'seek_begin' in SPVM::IO::Socket";
    } else {
      return $self->{fh}->seek(0, SPVM::IO::File->SEEK_SET);
    }
  }

  sub fileno : int ($self : self) {
    if ($self->{type} == _SOCKET()) {
      return $self->{sh}->fileno;
    } else {
      return $self->{fh}->fileno;
    }
  }
}
