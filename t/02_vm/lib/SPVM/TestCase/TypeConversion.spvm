class TestCase::TypeConversion {
  use TestCase::Minimal;
  use TestCase::AnonMethod::AnonMethod;
  use Comparator;
  use Fn;
  use Array;

  static method convert_undef_to_object : int () {
    
    my $string = (string)undef;
    unless ($string == undef) {
      return 0;
    }
    
    my $object = (object)undef;
    unless ($string == undef) {
      return 0;
    }
    
    return 1;
  }

  static method convert_to_numeric_array : int () {
    my $onums_byte : object = new byte[3];
    my $nums_byte = (byte[])$onums_byte;
    my $onums_short : object = new short[3];
    my $nums_short = (short[])$onums_short;
    my $onums_int : object = new int[3];
    my $nums_int = (int[])$onums_int;
    my $onums_long : object = new long[3];
    my $nums_long = (long[])$onums_long;
    my $onums_float : object = new float[3];
    my $nums_float = (float[])$onums_float;
    my $onums_double : object = new double[3];
    my $nums_double = (double[])$onums_double;
    
    return 1;
  }

  static method convert_to_any_object : int () {
    my $object = (object)new TestCase::Minimal[3];
    
    return 1;
  }

  static method convert_to_undef_to_any_object : int () {
    my $minimal : TestCase::Minimal;
    my $object = (object)$minimal;
    
    if ($object == undef) {
      return 1;
    }
    
    return 0;
  }

  static method convert_to_undef_to_object : int () {
    my $minimal : TestCase::Minimal;
    my $object = (TestCase::Minimal)$minimal;
    
    if ($object == undef) {
      return 1;
    }
    
    return 0;
  }

  static method convert_to_callback : int () {
    my $comparator = method : int ($object1 : object, $object2 : object) {
      return 5;
    };
    
    my $object : object = $comparator;
    
    my $comparator2 = (Comparator)$object;
    
    if ($comparator2->(undef, undef) == 5) {
      return 1;
    }
    
    return 0;
  }

  static method convert_to_undef_to_callback : int () {
    my $comparator : Comparator;
    
    my $comparator2 = (Comparator)$comparator;
    
    if ($comparator2 == undef) {
      return 1;
    }
    
    return 0;
  }

  static method convert_to_object_array : int () {
    my $ominimals : object = new TestCase::Minimal[3];
    my $minimals = (TestCase::Minimal[])$ominimals;
    
    return 1;
  }

  static method convert_to_callback_array : int () {
    my $ocallbacks : object = new TestCase::AnonMethod::AnonMethod[3];
    my $callbacks = (TestCase::AnonMethod::AnonMethod[])$ocallbacks;
    
    return 1;
  }

  # Convert type - floating point narrowing convertion
  static method convert_float_to_byte : int () {
    my $value = (byte)127.1f;
    
    if ($value == 127) {
      return 1;
    }
    
    return 0;
  }
  static method convert_float_to_short : int () {
    my $value = (short)32767.1f;
    
    if ($value == 32767) {
      return 1;
    }
    
    return 0;
  }
  static method convert_float_to_int : int () {
    my $value = (int)132767.1f;
    
    if ($value == 132767) {
      return 1;
    }
    
    return 0;
  }
  static method convert_float_to_long : int () {
    my $value = (long)132767.1f;
    
    if ($value == 132767L) {
      return 1;
    }
    
    return 0;
  }
  static method convert_double_to_byte : int () {
    my $value = (byte)127.1;
    
    if ($value == 127) {
      return 1;
    }
    
    return 0;
  }
  static method convert_double_to_short : int () {
    my $value = (short)32767.1;
    
    if ((int)$value == (int)(short)32767) {
      return 1;
    }
    
    return 0;
  }
  static method convert_double_to_int : int () {
    my $value = (int)2147483646.1;
    
    if ($value == 2147483646) {
      return 1;
    }
    
    return 0;
  }
  static method convert_double_to_long : int () {
    my $value = (long)2147483646.1;
    
    if ($value == 2147483646L) {
      return 1;
    }
    
    return 0;
  }
  static method convert_double_to_float : int () {
    my $value = (float)0.5;
    
    if ($value == 0.5f) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - floating point widning convertion
  static method convert_byte_to_float : int () {
    my $value = (float)(byte)127;
    
    if ($value == 127.0f) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_float : int () {
    my $value = (float)(short)32767;
    
    if ($value == 32767.0f) {
      return 1;
    }
    
    return 0;
  }
  static method convert_int_to_float : int () {
    my $value = (float)32767;
    
    if ($value == 32767.0f) {
      return 1;
    }
    
    return 0;
  }
  static method convert_long_to_float : int () {
    my $value = (float)32767L;
    
    if ($value == 32767.0f) {
      return 1;
    }
    
    return 0;
  }
  static method convert_byte_to_double : int () {
    my $value = (double)(byte)127;
    
    if ($value == 127.0) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_double : int () {
    my $value = (double)(short)32767;
    
    if ($value == 32767.0) {
      return 1;
    }
    
    return 0;
  }
  static method convert_int_to_double : int () {
    my $value = (double)2147483647;
    if ($value == 2147483647.0) {
      return 1;
    }
    
    return 0;
  }
  static method convert_long_to_double : int () {
    my $value = (double)2147483647L;
    
    if ($value == 2147483647.0) {
      return 1;
    }
    
    return 0;
  }
  static method convert_float_to_double : int () {
    my $value = (double)32767.0f;
    
    if ($value == 32767.0) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - widning convertion
  static method convert_byte_to_short_plus : int () {
    my $value = (short)(byte)0x7F;
    
    if ((int)$value == (int)(short)0x007F) {
      return 1;
    }
    
    return 0;
  }
  static method convert_byte_to_short_minus : int () {
    my $value = (short)(byte)0xFF;
    
    if ((int)$value == (int)(short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_byte_to_int_plus : int () {
    my $value = (int)(byte)0x7F;
    
    if ($value == 0x0000007F) {
      return 1;
    }
    
    return 0;
  }
  static method convert_byte_to_int_minus : int () {
    my $value = (int)(byte)0xFF;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_byte_to_long_plus : int () {
    my $value = (long)(byte)0x7F;
    
    if ($value == 0x000000000000007FL) {
      return 1;
    }
    
    return 0;
  }
  static method convert_byte_to_long_minus : int () {
    my $value = (long)(byte)0xFF;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_int_plus : int () {
    my $value = (int)(short)0x7FFF;
    
    if ($value == 0x0000007FFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_int_minus : int () {
    my $value = (int)(short)0xFFFF;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_long_plus : int () {
    my $value = (long)(short)0x7FFF;
    
    if ($value == 0x000000000000007FFFL) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_long_minus : int () {
    my $value = (long)(short)0xFFFF;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  static method convert_int_to_long_plus : int () {
    my $value = (long)0x7FFFFFFF;
    
    if ($value == 0x000000007FFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  static method convert_int_to_long_minus : int () {
    my $value = (long)0xFFFFFFFF;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - convert to same type
  static method convert_long_to_long : int () {
    my $value = (long)0xFFFFFFFFFFFFFFFFL;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  static method convert_int_to_int : int () {
    my $value = (int)0xFFFFFFFF;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_short : int () {
    my $value = (short)(short)0xFFFF;
    
    if ((int)$value == (int)(short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_byte_to_byte : int () {
    my $value = (byte)(byte)0xFF;
    
    if ($value == (byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_float_to_float : int () {
    my $value = (float)0.5f;
    
    if ($value == 0.5f) {
      return 1;
    }
    
    return 0;
  }
  static method convert_double_to_double : int () {
    my $value = (double)0.5;
    
    if ($value == 0.5) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - integral narrowing convertion
  static method convert_long_to_int : int () {
    my $value = (int)0xFFFFFFFFFFFFFFFFL;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_long_to_short : int () {
    my $value = (short)0xFFFFFFFFFFFFFFFFL;
    
    if ((int)$value == (int)(short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_long_to_byte : int () {
    my $value = (byte)0xFFFFFFFFFFFFFFFFL;
    
    if ((int)$value == (int)(byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_int_to_short : int () {
    my $value = (short)0xFFFFFFFF;
    
    if ((int)$value == (int)(short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_int_to_byte : int () {
    my $value = (byte)0xFFFFFFFF;
    
    if ((int)$value == (int)(byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  static method convert_short_to_byte : int () {
    my $value = (byte)(short)0xFFFF;
    
    if ((int)$value == (int)(byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  
  static method convert_byte_to_string : int () {
    {
      my $byte_string = (string)(byte)127;
      
      unless ($byte_string eq "127") {
        return 0;
      }
    }
    
    {
      my $byte_string = (string)(byte)-128;
      
      unless ($byte_string eq "-128") {
        return 0;
      }
    }
    
    return 1;
  }

  static method convert_short_to_string : int () {
    {
      my $short_string = (string)(short)32767;
      
      unless ($short_string eq "32767") {
        return 0;
      }
    }
    
    {
      my $short_string = (string)(short)-32768;
      
      unless ($short_string eq "-32768") {
        return 0;
      }
    }
    
    return 1;
  }

  static method convert_int_to_string : int () {
    {
      my $int_string = (string)2147483647;
      
      unless ($int_string eq "2147483647") {
        return 0;
      }
    }
    
    {
      my $int_string = (string)-2147483648;
      
      unless ($int_string eq "-2147483648") {
        return 0;
      }
    }
    return 1;
  }

  static method convert_long_to_string : int () {
    {
      my $long_string = (string)9223372036854775807L;
      
      unless ($long_string eq "9223372036854775807") {
        return 0;
      }
    }
    
    {
      my $long_string = (string)-9223372036854775808L;
      
      unless ($long_string eq "-9223372036854775808") {
        return 0;
      }
    }
    
    return 1;
  }

  static method convert_float_to_string : int () {
    my $float_string = (string)0.25000f;
    
    unless ($float_string eq "0.25") {
      return 0;
    }
    
    unless ((string)0.123f eq "0.123") {
      return 0;
    }
    
    unless ((string) -0.123f eq "-0.123") {
      return 0;
    }
    
    unless ((string)3.14f eq "3.14") {
      return 0;
    }
    
    unless ((string)-3.14f eq "-3.14") {
      return 0;
    }
    
    unless ((string)123.987f eq "123.987") {
      return 0;
    }
    
    unless ((string)-123.987f eq "-123.987") {
      return 0;
    }
    
    unless ((string)1.23456e+1f eq "12.3456") {
      return 0;
    }
    
    unless ((string)1.23456e-1f eq "0.123456") {
      return 0;
    }
    
    unless ((string)1.23456e+08f eq "1.23456e+08" || (string)1.23456e+08f eq "1.23456e+008") {
      return 0;
    }
    if ((string)1.23456e+08f eq "1.23456e+008") {
      warn "[Warning]1.23456e+008 is not C11 compliant. 1.23456e+08 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e-08f eq "1.23456e-08" || (string)1.23456e-08f eq "1.23456e-008") {
      return 0;
    }
    if ((string)1.23456e-08f eq "1.23456e-008") {
      warn "[Warning]1.23456e-008 is not C11 compliant. 1.23456e-08 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e+008f eq "1.23456e+08" || (string)1.23456e+008f eq "1.23456e+008") {
      return 0;
    }
    if ((string)1.23456e+008f eq "1.23456e+008") {
      warn "[Warning]1.23456e+008 is not C11 compliant. 1.23456e+08 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e-008f eq "1.23456e-08" || (string)1.23456e-008f eq "1.23456e-008") {
      return 0;
    }
    if ((string)1.23456e-08f eq "1.23456e-008") {
      warn "[Warning]1.23456e-008 is not C11 compliant. 1.23456e-08 is correct MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e+018f eq "1.23456e+18" || (string)1.23456e+018f eq "1.23456e+018") {
      return 0;
    }
    if ((string)1.23456e-08f eq "1.23456e-008") {
      warn "[Warning]1.23456e+018 is not C11 compliant. 1.23456e+18 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e-018f eq "1.23456e-18" || (string)1.23456e-018f eq "1.23456e-018") {
      return 0;
    }
    if ((string)1.23456e-018f eq "1.23456e-018") {
      warn "[Warning]1.23456e-018 is not C11 compliant. 1.23456e-18 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)9.9e+300f eq "inf" || (string)9.9e+300f eq "1.#INF") {
      return 0;
    }
    if ((string)9.9e+300f eq "1.#INF") {
      warn "[Warning]1.#INF is not C11 compliant. inf is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)9.9e-300f eq "0") {
      return 0;
    }
    
    unless ((string)-1.23e+123f eq "-inf" || (string)-1.23e+123f eq "-1.#INF") {
      return 0;
    }
    if ((string)-1.23e+123f eq "-1.#INF") {
      warn "[Warning]-1.#INF is not C11 compliant. -inf is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    return 1;
  }

  static method convert_double_to_string : int () {
    my $double_string = (string)0.25000;

    unless ($double_string eq "0.25") {
      return 0;
    }
    
    unless ((string)0.123 eq "0.123") {
      return 0;
    }
    
    unless ((string) -0.123 eq "-0.123") {
      return 0;
    }
    
    unless ((string)3.14 eq "3.14") {
      return 0;
    }
    
    unless ((string)-3.14 eq "-3.14") {
      return 0;
    }
    unless ((string)123.987 eq "123.987") {
      return 0;
    }
    
    unless ((string)-123.987 eq "-123.987") {
      return 0;
    }
    
    unless ((string)1.23456e+1 eq "12.3456") {
      return 0;
    }
    
    unless ((string)1.23456e-1 eq "0.123456") {
      return 0;
    }
    
    unless ((string)1.23456e+08 eq "1.23456e+08" || (string)1.23456e+08 eq "1.23456e+008") {
      return 0;
    }
    if ((string)1.23456e+08 eq "1.23456e+008") {
      warn "[Warning]1.23456e+008 is not C11 compliant. 1.23456e+08 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e-08 eq "1.23456e-08" || (string)1.23456e-08 eq "1.23456e-008") {
      return 0;
    }
    if ((string)1.23456e-08 eq "1.23456e-008") {
      warn "[Warning]1.23456e-008 is not C11 compliant. 1.23456e-08 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e+008 eq "1.23456e+08" || (string)1.23456e+008 eq "1.23456e+008") {
      return 0;
    }
    if ((string)1.23456e+008 eq "1.23456e+008") {
      warn "[Warning]1.23456e+008 is not C11 compliant. 1.23456e+08 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e-008 eq "1.23456e-08" || (string)1.23456e-008 eq "1.23456e-008") {
      return 0;
    }
    if ((string)1.23456e-08 eq "1.23456e-008") {
      warn "[Warning]1.23456e-008 is not C11 compliant. 1.23456e-08 is correct MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e+018 eq "1.23456e+18" || (string)1.23456e+018 eq "1.23456e+018") {
      return 0;
    }
    if ((string)1.23456e-08 eq "1.23456e-008") {
      warn "[Warning]1.23456e+018 is not C11 compliant. 1.23456e+18 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)1.23456e-018 eq "1.23456e-18" || (string)1.23456e-018 eq "1.23456e-018") {
      return 0;
    }
    if ((string)1.23456e-018 eq "1.23456e-018") {
      warn "[Warning]1.23456e-018 is not C11 compliant. 1.23456e-18 is correct. MinGW version is maybe lower than v8.1.0";
    }
    
    unless ((string)9.9e+300 eq "9.9e+300") {
      return 0;
    }
    unless ((string)9.9e-300 eq "9.9e-300") {
      return 0;
    }
    unless ((string)-1.23e+123 eq "-1.23e+123") {
      return 0;
    }
    
    return 1;
  }

  static method convert_byte_to_byte_object : int () {
    my $byte : byte = (byte)Fn->INT8_MIN;
    my $byte_obj = (Byte)$byte;
    
    if ($byte_obj isa Byte) {
      if ($byte_obj->value == Fn->INT8_MIN) {
        return 1;
      }
    }
    return 0;
  }


  static method convert_short_to_short_object : int () {
    my $short : short = (short)Fn->INT16_MIN;
    my $short_obj = (Short)$short;
    
    if ($short_obj isa Short) {
      if ($short_obj->value == Fn->INT16_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_int_to_int_object : int () {
    my $int : int = Fn->INT32_MIN;
    my $int_obj = (Int)$int;
    
    if ($int_obj isa Int) {
      if ($int_obj->value == Fn->INT32_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_long_to_long_object : int () {
    my $long : long = Fn->INT64_MIN;
    my $long_obj = (Long)$long;
    
    if ($long_obj isa Long) {
      if ($long_obj->value == Fn->INT64_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_float_to_float_object : int () {
    my $float : float = Fn->FLT_MIN;
    my $float_obj = (Float)$float;
    
    if ($float_obj isa Float) {
      if ($float_obj->value == Fn->FLT_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_double_to_double_object : int () {
    my $double : double = Fn->DBL_MIN;
    my $double_obj = (Double)$double;
    
    if ($double_obj isa Double) {
      if ($double_obj->value == Fn->DBL_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_byte_to_any_object : int () {
    my $byte : byte = (byte)Fn->INT8_MIN;
    my $byte_obj = (object)$byte;
    
    if ($byte_obj isa Byte) {
      my $byte_obj2 = (Byte)$byte_obj;
      if ($byte_obj2->value == Fn->INT8_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_short_to_any_object : int () {
    my $short : short = (short)Fn->INT16_MIN;
    my $short_obj = (object)$short;
    
    if ($short_obj isa Short) {
      my $short_obj2 = (Short)$short_obj;
      if ($short_obj2->value == Fn->INT16_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_int_to_any_object : int () {
    my $int : int = Fn->INT32_MIN;
    my $int_obj = (object)$int;
    
    if ($int_obj isa Int) {
      my $int_obj2 = (Int)$int_obj;
      if ($int_obj2->value == Fn->INT32_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_long_to_any_object : int () {
    my $long : long = Fn->INT64_MIN;
    my $long_obj = (object)$long;
    
    if ($long_obj isa Long) {
      my $long_obj2 = (Long)$long_obj;
      if ($long_obj2->value == Fn->INT64_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_float_to_any_object : int () {
    my $float : float = Fn->FLT_MIN;
    my $float_obj = (object)$float;
    
    if ($float_obj isa Float) {
      my $float_obj2 = (Float)$float_obj;
      if ($float_obj2->value == Fn->FLT_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_double_to_any_object : int () {
    my $double : double = Fn->DBL_MIN;
    my $double_obj = (object)$double;
    
    if ($double_obj isa Double) {
      my $double_obj2 = (Double)$double_obj;
      if ($double_obj2->value == Fn->DBL_MIN) {
        return 1;
      }
    }
    return 0;
  }

  static method convert_byte_object_to_byte : int () {
    my $byte_obj = Byte->new(Fn->INT8_MIN);
    my $byte = (byte)$byte_obj;
    
    if ($byte == Fn->INT8_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_short_object_to_short : int () {
    my $short_obj = Short->new(Fn->INT16_MIN);
    my $short = (short)$short_obj;
    
    if ($short == Fn->INT16_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_int_object_to_int : int () {
    my $int_obj = Int->new(Fn->INT32_MIN);
    my $int = (int)$int_obj;
    
    if ($int == Fn->INT32_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_long_object_to_long : int () {
    my $long_obj = Long->new(Fn->INT64_MIN);
    my $long = (long)$long_obj;
    
    if ($long == Fn->INT64_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_float_object_to_float : int () {
    my $float_obj = Float->new(Fn->FLT_MIN);
    my $float = (float)$float_obj;
    
    if ($float == Fn->FLT_MIN) {
      return 1;
    }
    return 0;
  }
  static method convert_double_object_to_double : int () {
    my $double_obj = Double->new(Fn->DBL_MIN);
    my $double = (double)$double_obj;
    
    if ($double == Fn->DBL_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_any_object_to_byte : int () {
    my $byte_obj = (object)Byte->new(Fn->INT8_MIN);
    my $byte = (byte)$byte_obj;
    
    if ($byte == Fn->INT8_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_any_object_to_short : int () {
    my $short_obj = (object)Short->new(Fn->INT16_MIN);
    my $short = (short)$short_obj;
    
    if ($short == Fn->INT16_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_any_object_to_int : int () {
    my $int_obj = (object)Int->new(Fn->INT32_MIN);
    my $int = (int)$int_obj;
    
    if ($int == Fn->INT32_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_any_object_to_long : int () {
    my $long_obj = (object)Long->new(Fn->INT64_MIN);
    my $long = (long)$long_obj;
    
    if ($long == Fn->INT64_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_any_object_to_float : int () {
    my $float_obj = (object)Float->new(Fn->FLT_MIN);
    my $float = (float)$float_obj;
    
    if ($float == Fn->FLT_MIN) {
      return 1;
    }
    return 0;
  }
  static method convert_any_object_to_double : int () {
    my $double_obj = (object)Double->new(Fn->DBL_MIN);
    my $double = (double)$double_obj;
    
    if ($double == Fn->DBL_MIN) {
      return 1;
    }
    return 0;
  }

  static method convert_postfix : int () {
    
    my $num = 3;
    
    my $string = $num->(string);
    
    unless ($string isa string) {
      return 0;
    }
    
    unless ($string eq "3") {
      return 0;
    }
    
    return 1;
  }

}
