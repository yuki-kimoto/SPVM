class TestCase::Module::Native::Runtime::Info {
  use Native;
  use Fn;
  use Array;
  use Point;
  
  static method get_basic_type_names : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $basic_type_names = $current_runtime_info->get_basic_type_names;
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "int") { return 1; }
        };
        
        unless (@{Fn->grep($basic_type_names, $callback)}) {
          return 0;
        }
      }
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "Fn") { return 1; }
        };
        
        unless (@{Fn->grep($basic_type_names, $callback)}) {
          return 0;
        }
      }
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "Array") { return 1; }
        };
        
        unless (@{Fn->grep($basic_type_names, $callback)}) {
          return 1;
        }
      }
    }
    
    return 1;
  }
  
  static method get_class_names : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $class_names = $current_runtime_info->get_class_names;
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "Fn") { return 1; }
        };
        
        unless (@{Fn->grep($class_names, $callback)}) {
          return 0;
        }
      }
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "Array") { return 1; }
        };
        
        unless (@{Fn->grep($class_names, $callback)}) {
          return 1;
        }
      }
    }
    
    return 1;
  }
  
  static method get_method_names : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $method_names = $current_runtime_info->get_method_names("Fn");
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "join") { return 1; }
        };
        
        unless (@{Fn->grep($method_names, $callback)}) {
          return 0;
        }
      }
      
    }
    
    return 1;
  }
  
  static method get_field_names : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $field_names = $current_runtime_info->get_field_names("Point");
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "x") { return 1; }
        };
        
        unless (@{Fn->grep($field_names, $callback)}) {
          return 0;
        }
      }
      
    }
    
    return 1;
  }
  
  static method get_class_var_names : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $class_var_names = $current_runtime_info->get_class_var_names("Bool");
      
      {
        my $callback = method : int ($element : object) {
          if ($element->(string) eq "\$TRUE") { return 1; }
        };
        
        unless (@{Fn->grep($class_var_names, $callback)}) {
          return 0;
        }
      }
      
    }
    
    return 1;
  }
  
  static method get_method : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $method = $current_runtime_info->get_method("Fn", "join");
      
      unless ($method is_type Native::Method) {
        return 0;
      }
      
      {
        unless ($method->get_name eq "join") {
          return 0;
        }
      }
      
    }
    
    return 1;
  }
  
  static method get_field : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $field = $current_runtime_info->get_field("Point", "x");
      
      unless ($field is_type Native::Field) {
        return 0;
      }
      
      {
        unless ($field->get_name eq "x") {
          return 0;
        }
      }
      
    }
    
    return 1;
  }
  
  static method get_class_var : int () {
    
    {
      my $current_runtime_info = Native->info;
      
      my $class_var = $current_runtime_info->get_class_var("Bool", "\$TRUE");
      
      unless ($class_var is_type Native::ClassVar) {
        return 0;
      }
      
      {
        unless ($class_var->get_name eq "\$TRUE") {
          return 0;
        }
      }
      
    }
    
    return 1;
  }
  
}
