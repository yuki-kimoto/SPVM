class TestCase::Refcnt {
  use TestCase::Minimal;
  use TestCase::Simple;
  
  static method refcnt_test : int () {
    # Basic
    {
      my $minimal = new TestCase::Minimal;
      
      unless (refcnt $minimal == 1) {
        return 0;
      }
      
      my $minimal2 = $minimal;
      unless (refcnt $minimal == 2) {
        return 0;
      }
    }
    
    # Repeat
    {
      my $minimal = new TestCase::Minimal;
      
      unless (refcnt $minimal == 1) {
        return 0;
      }
      
      unless (refcnt $minimal == 1) {
        return 0;
      }
    }
    
    # undef
    {
      my $minimal2 : TestCase::Minimal;

      unless (refcnt $minimal2 == 0) {
        return 0;
      }
    }
    
    # Operation which use tmp var
    {
      my $nums = [1, 2, 3];
      
      unless (refcnt $nums == 1) {
        return 0;
      }
    }

    # anon method
    {
      my $object = method : void () { };
      
      unless (refcnt $object == 1) {
        return 0;
      }
    }

    # Special assign - concat
    {
      my $string = "abc";
      
      $string .= "def";
      
      unless (refcnt $string == 1) {
        return 0;
      }
    }

    # Setting field
    {
      {
        my $simple = new TestCase::Simple;
        
        $simple->{object_value} = new TestCase::Minimal;
        
        my $minimal = $simple->{object_value};
        
        unless (refcnt $minimal == 2) {
          return 0;
        }
      }
    }
    
    # Setting array element
    {
      {
        my $object = new TestCase::Minimal;
        
        my $objects = new TestCase::Minimal[1];
        
        $objects->[0] = $object;
        
        my $objects2 = $objects->[0];
        
        unless (refcnt $object == 3) {
          return 0;
        }
      }
    }
    
    # Assign
    {
      {
        my $nums = new object[1];
        
        my $object = TestCase::Minimal->new;
        my $object2 = $nums->[0] = $object;
        
        unless (refcnt $object == 3) {
          return 0;
        }
      }
      
      {
        my $nums = new object[1];
        
        my $object = TestCase::Minimal->new;
        my $object3 = (object)undef;
        my $object2 = $object3 = $nums->[0] = $object;
        
        unless (refcnt $object == 4) {
          return 0;
        }
      }
    }
    
=pod

    # If condition
    {
      my $simple = new TestCase::Simple;
      
      $simple->{object_value} = new TestCase::Minimal;
      
      if ($simple->{object_value}) {
        my $minimal = $simple->{object_value};
        warn refcnt $minimal;
        unless (refcnt $minimal == 2) {
          return 0;
        }
      }
    }
    # Method arguments
    {
      {
        my $simple = new TestCase::Simple;
        
        $simple->{object_value} = new TestCase::Minimal;
        
        TestCase::Refcnt->func($simple->{object_value});
        TestCase::Refcnt->func($simple->{object_value});
        
        my $minimal = $simple->{object_value};
        
        unless (refcnt $minimal == 2) {
          return 0;
        }
      }
    }
    
=cut

    return 1;
  }
  


  static method func :void ($object : TestCase::Minimal) {
    return;
  }
}
