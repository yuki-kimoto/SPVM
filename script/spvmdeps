#!perl

use strict;
use warnings;

use SPVM();
use SPVM::Builder::DependencyAnalyzer;
use SPVM::Builder::Util;
use FindBin;

SPVM::Builder::Util::getopt
  # spvmdeps and spvm shared
  'h|help'          => \my $help,
  'v|version'       => \my $show_version,
  'I|include-dir=s' => \my @include_dirs,
  
  # spvmdeps only
  'o|output=s'        => \my $output_file,
  'resource-info' => \my $show_resource_info,
  'dependency' => \my $show_dependency,
  'dependency-cpan' => \my $show_dependency_cpan,
;

if ($help) {
  print SPVM::Builder::Util::extract_usage;
  exit 0;
}
elsif ($show_version) {
  my $version_string = "spvmdeps v$SPVM::VERSION";
  print "$version_string\n";
  exit 0;
}

my $script_name = shift;

my $source = "";

$0 = $script_name;

FindBin::again();

eval { $source = SPVM::Builder::Util::slurp_binary($script_name); };

my $include_dirs_by_lib_directive = SPVM::Builder::Util::parse_lib_directive($source, $FindBin::Bin);

unshift @INC, map { $_ =~ s/[\\\/]SPVM$//; $_; } @include_dirs, @$include_dirs_by_lib_directive;

if ($show_resource_info) {
  
  unless (defined $script_name) {
    die "[spvmdeps command]--resource-info option needs <script_name>."
  }
  
  my $resource_info = SPVM::Builder::DependencyAnalyzer->dump_resource_info($script_name);
  
  print $resource_info;
  exit 0;
}
elsif ($show_dependency) {
  
  unless (defined $script_name) {
    die "[spvmdeps command]--dependency option needs <script_name>."
  }
  
  my $dependency = SPVM::Builder::DependencyAnalyzer->dump_dependency($script_name);
  
  print $dependency;
  exit 0;
}
elsif ($show_dependency_cpan) {
  
  unless (defined $script_name) {
    die "[spvmdeps command]--dependency option needs <script_name>."
  }
  
  my $dependency_cpan = SPVM::Builder::DependencyAnalyzer->dump_dependency_cpan($script_name);
  
  print $dependency_cpan;
  exit 0;
}

=encoding utf8

=head1 Name

spvmdeps - Generating Excutable File

=head1 Description

The spvmdeps command generates an executable file from SPVM classes.

=head1 Usage

  usage: spvmdeps [<options>] <script_name>
    
    spvmdeps -o myapp myapp.spvm
    
    spvmdeps -I lib/SPVM -o myapp myapp.spvm
  
  options:
    -h, --help                      Shows this message
    -v, --version                   Shows the version
    -I, --include-dir <directory>   Adds a include directory
    --resource-info                 Show config files of dependent resources
    --dependency                    Show dependent classes and their versions
    --dependency-cpan               Show dependent cpan modules and their versions

=head1 Details

  spvmdeps [<options>] <script_name>

The C<spvmdeps> command generates an executable file from SPVM classes.

C<E<lt>optionsE<gt>> are L<options|/"Options">.

C<E<lt>script_nameE<gt>> is a script name that contains a L<bootstrap method|SPVM::Document::Language::Class/"Bootstrap Method"> in an L<anon class|SPVM::Document::Language::Class/"Anon Class">.

  class {
    static method main : void () {
      
    }
  }

See L<Class Search Directories|SPVM::Document::Language::Class/"Class Search Directories"> about default class search directories.

See L<SPVM::Document::EnvironmentVariables> about available environment variables.

=head2 Config File for Executable File

The config for an executable file is a L<SPVM::Builder::Config::Exe> object.

C<myapp.config>:

  use SPVM::Builder::Config::Exe;
  
  my $exe_config = SPVM::Builder::Config::Exe->new_gnu99(file => __FILE__);
  
  $exe_config

=head2 Caching System

Compiled object files and an executable file are not rebuilt unless they need to be rebuilt.

=head2 Resources

There are important points to be aware of when generating executable files. That is, L<resources|SPVM::Document::Resource> are not automatically compiled.

When you run an SPVM program with the L<spvm> command, the resources are contained within the shared library of each class. Therefore, there are no conflicts between resources.

However, in the case of executable files, there are resource conflicts. For this, the resources must be resolved manually in the configuration file.

  $config->use_resource('Resource::Zlib');

This is hard work, but given that the executable file must be compiled from source files and run on a variety of platforms, I think that solving it manually is a better way.

I have published a command that allows you to view the list of classes using resources and the resource settings.

L<How to dump resource information|https://github.com/yuki-kimoto/SPVM/wiki/Config#how-to-dump-resource-information>

=head1 Options

=head2 --help

Outputs how to use the C<spvmdeps> command to standard output.

=head2 -h

  -h

Same as L</"--help">.

=head2 --version

Outputs the version of the C<spvmdeps> command to standard output. This version is the same as the version of L<SPVM>.

=head2 -v

  -v

Same as L</"--version">.

=head2 --include-dir

  --include-dir <directory>

Prepends C<E<lt>directoryE<gt>> to L<class search directories|SPVM::Document::Language::Class/"Class Search Directories">

This option can be specified multiple times.

  --include-dir dir1 --include-dir dir2

In this case, class search directories becomes the following.

  [dir1, dir2, default_dirs]

=head2 -I

  -I <directory>

Same as L</"--include-dir">.

=head2 --resource-info

  --resource-info

Shows all config files loading resources.

=head2 --dependency

  --dependency

Shows all dependent classes and their versions.

Output Example:

  Sys 1.201
  Regex 0.980
  Foo

=head2 --dependency-cpan

  --dependency-cpan

Shows all dependent cpan modules and their versions.

Output Example:

  SPVM 1.001
  SPVM::Sys 1.201
  SPVM::Regex 0.980
  SPVM::Foo

=head1 lib Directive

If the source code specified by C<E<lt>script_nameE<gt>> contains lib directives, The directories specified by lib directive is prepeneded to L<class search directories|SPVM::Document::Language::Class/"Class Search Directories">.
  
  #lib "$FindBin::Bin/lib"
  
  class {
  
  }

This directories specified by lib directive is placed after the directories specified by L</"--include-dir"> option.

=head1 Copyright & License

Copyright 2023 Yuki Kimoto. All Rights Reserved.

MIT License.
